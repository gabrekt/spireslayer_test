import base64
import json

save_data = ""


class SaveEditor():
    def __init__(self, encoded_save_data: str) -> None:
        super().__init__()
        self.key = "key"
        self.encoded_save_data = encoded_save_data
        self.json_save_data = self.save_to_json()

    def base64_encode(self, string):
        return base64.b64encode(string)

    def base64_decode(self, string) -> bytes:
        return base64.b64decode(string)

    def save_to_json(self):
        data: bytes = self.base64_decode(self.encoded_save_data)
        json_char_list: list = list()

        for i, value in enumerate(data):
            modulus_index: int = i % len(self.key)
            xor_result: int = data[i] ^ ord(self.key[modulus_index])
            char_result: str = chr(xor_result)
            json_char_list.append(char_result)

        plain_json = ''.join(json_char_list)
        return json.loads(plain_json)

    def json_to_save(self):
        assert self.json_save_data is not None, "JSON save data is None"
        plain_json = json.dumps(self.json_save_data)
        assert isinstance(plain_json, str)

        encoded_char_list: list = list()
        for i, value in enumerate(plain_json):
            modulus_index: int = i % len(self.key)
            xor_result: int = ord(value) ^ ord(self.key[modulus_index])
            encoded_char_list.append(xor_result)

        final_data = self.base64_encode(bytes(encoded_char_list))

        return final_data

    def update_current_health(self, health: int = 200):
        self.json_save_data['current_health'] = health
        assert self.json_save_data.get('current_health') == health


if __name__ == '__main__':
    editor = SaveEditor(save_data)
    editor.update_current_health()

    updated_save_data = editor.json_to_save()
    print(updated_save_data)
